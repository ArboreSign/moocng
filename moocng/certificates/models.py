# Copyright 2012 Rooter Analysis S.L.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from uuid import uuid4

from django.contrib.auth.models import User
from django.db import models
from django.utils.translation import ugettext_lazy as _

from moocng.courses.models import Course


class ExamRight(models.Model):

    student = models.ForeignKey(
        User, verbose_name=_(u'Student'), blank=False, null=False)
    course = models.ForeignKey(
        Course, verbose_name=_(u'Course'), blank=False, null=False)
    payment_datetime = models.DateTimeField(
        verbose_name=_(u'Payment datetime'), blank=False, null=False)

    exam_datetime = models.DateTimeField(
        verbose_name=_(u'Exam datetime'), blank=True, null=True)
    # exam_code is autogenerated
    exam_code = models.CharField(
        verbose_name=_(u'Exam code'), max_length=32, unique=True)
    exam_grade = models.PositiveSmallIntegerField(
        verbose_name=_(u'Exam grade'), blank=True, null=True)

    class Meta:
        verbose_name = _(u'exam right')
        verbose_name_plural = _(u'exam rights')

    def __unicode__(self):
        name = self.student.get_full_name() or self.student.username
        return u'%s - %s' % (self.course.name, name)

    def generate_code(self):
        self.exam_code = uuid4().hex


def handle_exam_right_pre_save(sender, instance, raw, **kwargs):
    if instance.exam_code == '':
        instance.generate_code()


models.signals.pre_save.connect(handle_exam_right_pre_save, sender=ExamRight)
